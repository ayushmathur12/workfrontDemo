{"version":3,"file":"workfront-api.cjs.js","sources":["../src/Api.ts","../src/node.ts"],"sourcesContent":["/**\n * Copyright 2015 Workfront\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\")\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @author Hovhannes Babayan <bhovhannes at gmail dot com>\n * @author Sassoun Derderian <citizen.sas at gmail dot com>\n */\n\nimport {INTERNAL_PREFIX} from 'workfront-api-constants'\n\nexport interface IHttpOptions {\n    path?: string\n    method?: string\n    url: string\n    alwaysUseGet?: boolean\n    headers: {\n        sessionID?: string\n        'X-XSRF-TOKEN'?: string\n        apiKey?: string\n    }\n}\nexport interface IApiConfig {\n    url: string\n    version?: string\n    alwaysUseGet?: boolean\n    apiKey?: string\n    headers?: {[key: string]: string}\n}\nexport type TFields = string | string[]\n\n/**\n * Configuration for the Api constructor\n * @typedef {Object} config\n * @property {String} url - Required. A url to Workfront server (for example: http://localhost:8080)\n * @property {String} [version=internal] - Which version of api to use. At the moment of writing can be 2.0, 3.0, ..., 8.0. Pass 'unsupported' to use Workfront latest API (maybe unstable)\n * @property {Boolean} [alwaysUseGet=false] - Will cause the api to make every request as a GET with params in the query string and add method=DESIRED_METHOD_TYPE in the query string. Some Workfront urls will have issues with PUT and DELETE calls if this value is false\n * @property {String} [apiKey] - It is used to pass apiKey with every api request headers\n * @property {Object} [headers] - An key-value object that sets custom headers (for example: {'user-agent': DESIRED_USER_AGENT_NAME})\n */\n\n/**\n * Creates new Api instance.\n * @param {Object} config   An object with the following keys:<br/>\n * @constructor\n */\nexport class Api {\n    static Methods = {\n        GET: 'GET',\n        PUT: 'PUT',\n        DELETE: 'DELETE',\n        POST: 'POST',\n    }\n    _httpOptions: IHttpOptions\n    serverAcceptsJSON: boolean\n\n    _uriGenerationMode: boolean\n\n    constructor(config: IApiConfig) {\n        this.serverAcceptsJSON = true\n        this._uriGenerationMode = false\n        this._httpOptions = {\n            url: config.url,\n            alwaysUseGet: config.alwaysUseGet,\n            headers: config.headers || {},\n        }\n        if (config.apiKey) {\n            this._httpOptions.headers.apiKey = config.apiKey\n        }\n        // Append version to path if provided\n        let path\n        const {\n            version = 'internal',\n        }: {\n            version?: string\n        } = config\n        if (['internal', 'unsupported', 'asp'].indexOf(version) >= 0) {\n            path = '/attask/api-' + version\n        } else {\n            path = '/attask/api/v' + version\n            if (version === '2.0' || version === '3.0' || version === '4.0') {\n                this.serverAcceptsJSON = false\n            }\n        }\n        this._httpOptions.path = path\n    }\n\n    /**\n     * Used to obtain an API key\n     * @memberOf Api\n     * @param {String} username    A username in Workfront\n     * @param {String} password    Password to use\n     * @param {String} subdomain    Sub-domain to use\n     * @return {Promise}    A promise which will resolved with API key if everything went ok and rejected otherwise\n     */\n    getApiKey(username: string, password: string, subdomain?: string): Promise<string> {\n        const loginParams = {\n            username,\n            password,\n        }\n        if (subdomain !== undefined) {\n            loginParams['subdomain'] = subdomain\n        }\n        return new Promise<string>((resolve, reject) => {\n            if (typeof this._httpOptions.headers.apiKey !== 'undefined') {\n                resolve(this._httpOptions.headers.apiKey)\n            } else {\n                const req = this.execute('USER', null, 'getApiKey', loginParams)\n                ;(req as Promise<any>).then((getApiKeyData) => {\n                    if (getApiKeyData.result === '') {\n                        const req2 = this.execute('USER', null, 'generateApiKey', loginParams)\n                        ;(req2 as Promise<any>).then((generateApiKeyData) => {\n                            this._httpOptions.headers.apiKey = generateApiKeyData.result\n                            resolve(this._httpOptions.headers.apiKey)\n                        }, reject)\n                    } else {\n                        this._httpOptions.headers.apiKey = getApiKeyData.result\n                        resolve(this._httpOptions.headers.apiKey)\n                    }\n                }, reject)\n            }\n        })\n    }\n\n    /**\n     * Copies an existing object with making changes on a copy.\n     * Copying is supported only for some objects. The {@link https://developers.workfront.com/api-docs/api-explorer/|Workfront API Explorer} page displays which objects support the Copy action.\n     * @memberOf Api\n     * @param {String} objCode    One of object codes from {@link https://developers.workfront.com/api-docs/api-explorer/|Workfront API Explorer}\n     * @param {String} objID    ID of object to copy\n     * @param {Object} updates    Which fields to set on copied object. See {@link https://developers.workfront.com/api-docs/api-explorer/|Workfront API Explorer} for the list of available fields for the given objCode.\n     * @param {String|String[]} [fields]    Which fields to return. See {@link https://developers.workfront.com/api-docs/api-explorer/|Workfront API Explorer} for the list of available fields for the given objCode.\n     * @param {String[]} options    A list of options that are attached to the copy request (object specific)\n     * @return {Promise}    A promise which will resolved with results if everything went ok and rejected otherwise\n     */\n    copy(objCode: string, objID: string, updates: object, fields?: TFields, options?: string[]) {\n        const params: {\n            copySourceID: string\n            updates?: string\n            options?: string\n        } = {\n            copySourceID: objID,\n        }\n        if (updates) {\n            params.updates = JSON.stringify(updates)\n        }\n        if (options) {\n            params.options = JSON.stringify(options)\n        }\n        return this.request(objCode, params, fields, Api.Methods.POST)\n    }\n\n    /**\n     * Used to retrieve number of objects matching given search criteria\n     * @memberOf Api\n     * @param {String} objCode\n     * @param {[Object]} query    An object with search criteria\n     * @return {Promise}\n     */\n    count(objCode: string, query?: object): Promise<number> {\n        const req = this.request(objCode + '/count', query, null, Api.Methods.GET)\n        if (this._uriGenerationMode) {\n            return req\n        }\n        return (req as Promise<any>).then(function (data) {\n            return data.count\n        })\n    }\n\n    /**\n     * Invalidates the current API key.\n     * Call this to be able to retrieve a new one using getApiKey().\n     * @memberOf Api\n     * @return {Promise}    A promise which will resolved if everything went ok and rejected otherwise\n     */\n    clearApiKey() {\n        return new Promise<void>((resolve, reject) => {\n            const req = this.execute('USER', null, 'clearApiKey')\n            req.then((result) => {\n                if (result) {\n                    delete this._httpOptions.headers.apiKey\n                    resolve()\n                } else {\n                    reject()\n                }\n            })\n        })\n    }\n\n    /**\n     * Creates a new object.\n     * @memberOf Api\n     * @param {String} objCode    One of object codes from {@link https://developers.workfront.com/api-docs/api-explorer/|Workfront API Explorer}\n     * @param {Object} params    Values of fields to be set for the new object. See {@link https://developers.workfront.com/api-docs/api-explorer/|Workfront API Explorer} for the list of available fields for the given objCode.\n     * @param {String|String[]} [fields]    Which fields of newly created object to return. See {@link https://developers.workfront.com/api-docs/api-explorer/|Workfront API Explorer} for the list of available fields for the given objCode.\n     * @returns {Promise}    A promise which will resolved with the ID and any other specified fields of newly created object\n     */\n    create(objCode: string, params: any, fields?: TFields) {\n        if (params.hasOwnProperty('updates')) {\n            return this.request(objCode, params, fields, Api.Methods.POST)\n        }\n        return this.request(objCode, {updates: params}, fields, Api.Methods.POST)\n    }\n\n    /**\n     * Edits an existing object\n     * @memberOf Api\n     * @param {String} objCode    One of object codes from {@link https://developers.workfront.com/api-docs/api-explorer/|Workfront API Explorer}\n     * @param {String} objID    ID of object to modify\n     * @param {Object} updates    Which fields to set. See {@link https://developers.workfront.com/api-docs/api-explorer/|Workfront API Explorer} for the list of available fields for the given objCode.\n     * @param {String|String[]} [fields]    Which fields to return. See {@link https://developers.workfront.com/api-docs/api-explorer/|Workfront API Explorer} for the list of available fields for the given objCode.\n     * @return {Promise}    A promise which will resolved with results if everything went ok and rejected otherwise\n     */\n    edit(objCode: string, objID: string, updates: any, fields?: TFields) {\n        if (updates.hasOwnProperty('updates')) {\n            return this.request(objCode + '/' + objID, updates, fields, Api.Methods.PUT)\n        }\n        return this.request(objCode + '/' + objID, {updates: updates}, fields, Api.Methods.PUT)\n    }\n\n    /**\n     * Edit multiple existing objects\n     * @memberOf Api\n     * @param {String} objCode    One of object codes from {@link https://developers.workfront.com/api-docs/api-explorer/|Workfront API Explorer}\n     * @param {Array} updates    Array of fields for each object to be edited. See {@link https://developers.workfront.com/api-docs/api-explorer/|Workfront API Explorer} for the list of available fields for the given objCode.\n     * @param {String|String[]} [fields]    Which fields to return. See {@link https://developers.workfront.com/api-docs/api-explorer/|Workfront API Explorer} for the list of available fields for the given objCode.\n     * @return {Promise}    A promise which will resolved with results if everything went ok and rejected otherwise\n     */\n    editMultiple(objCode: string, updates: any[], fields?: TFields) {\n        return this.request(objCode, {updates: updates}, fields, Api.Methods.PUT)\n    }\n\n    /**\n     * Executes an action for the given object\n     * @memberOf Api\n     * @param {String} objCode    One of object codes from {@link https://developers.workfront.com/api-docs/api-explorer/|Workfront API Explorer}\n     * @param {String|null} objID    ID of object. Optional, pass null or undefined to omit\n     * @param {String} action    An action to execute. A list of allowed actions are available within the {@link https://developers.workfront.com/api-docs/api-explorer/|Workfront API Explorer} under \"actions\" for each object.\n     * @param {Object} [actionArgs]    Optional. Arguments for the action. See {@link https://developers.workfront.com/api-docs/api-explorer/|Workfront API Explorer} for the list of valid arguments\n     * @returns {Promise}    A promise which will resolved if everything went ok and rejected otherwise\n     */\n    execute(objCode: string, objID: string | null, action: string, actionArgs?: object) {\n        let endPoint = objCode\n        let params: any = {method: Api.Methods.PUT}\n        if (objID) {\n            endPoint += '/' + objID + '/' + action\n        } else {\n            params.action = action\n        }\n        if (actionArgs) {\n            params = {...params, ...actionArgs}\n        }\n        return this.request(endPoint, params, null, Api.Methods.POST)\n    }\n\n    /**\n     * Used for retrieve an object or multiple objects.\n     * @memberOf Api\n     * @param {String} objCode    One of object codes from {@link https://developers.workfront.com/api-docs/api-explorer/|Workfront API Explorer}\n     * @param {String|Array} objIDs    Either one or multiple object ids\n     * @param {String|String[]} fields    Which fields to return. See {@link https://developers.workfront.com/api-docs/api-explorer/|Workfront API Explorer} for the list of available fields for the given objCode.\n     * @return {Promise}    A promise which will resolved with results if everything went ok and rejected otherwise\n     */\n    get(objCode: string, objIDs: string | string[], fields?: TFields) {\n        if (typeof objIDs === 'string') {\n            objIDs = [objIDs]\n        }\n        let endPoint = objCode,\n            params = null\n        if (objIDs.length === 1) {\n            if (objIDs[0].indexOf(INTERNAL_PREFIX) === 0) {\n                params = {id: objIDs[0]}\n            } else {\n                endPoint += '/' + objIDs[0]\n            }\n        } else {\n            params = {id: objIDs}\n        }\n        return this.request(endPoint, params, fields, Api.Methods.GET)\n    }\n\n    /**\n     * Logs in into Workfront. Should be a first call to Workfront API.\n     * Other calls should be made after this one will be completed.\n     * @memberOf Api\n     * @param {String} username    A username in Workfront\n     * @param {String} password    Password to use\n     * @param {String} subdomain    Sub-domain to use\n     * @return {Promise}    A promise which will resolved with logged in user data if everything went ok and rejected otherwise\n     */\n    login(username: string, password: string, subdomain?: string) {\n        const params = {username, password}\n        if (subdomain !== undefined) {\n            params['subdomain'] = subdomain\n        }\n        const req = this.request('login', params, null, Api.Methods.POST)\n        return (req as Promise<any>).then((data) => {\n            this.setSessionID(data.sessionID)\n            return data\n        })\n    }\n\n    /**\n     * Logs out from Workfront\n     * @memberOf Api\n     * @return {Promise}    A promise which will resolved if everything went ok and rejected otherwise\n     */\n    logout(): Promise<void> {\n        return new Promise<void>((resolve, reject) => {\n            const req = this.request('logout', null, null, Api.Methods.GET)\n            req.then((result) => {\n                if (result && result.success) {\n                    delete this._httpOptions.headers['X-XSRF-TOKEN']\n                    delete this._httpOptions.headers.sessionID\n                    resolve()\n                } else {\n                    reject()\n                }\n            })\n        })\n    }\n\n    /**\n     * Retrieves API metadata for an object.\n     * @memberOf Api\n     * @param {String} [objCode]    One of object codes from {@link https://developers.workfront.com/api-docs/api-explorer/|Workfront API Explorer}. If omitted will return list of objects available in API.\n     * @param {String|String[]} fields    Which fields to return.\n     * @return {Promise}    A promise which will resolved with object metadata if everything went ok and rejected otherwise\n     */\n    metadata(objCode?: string, fields?: TFields) {\n        let path = '/metadata'\n        if (objCode) {\n            path = objCode + path\n        }\n        return this.request(path, null, fields, Api.Methods.GET)\n    }\n\n    /**\n     * Executes a named query for the given obj code\n     * @memberOf Api\n     * @param {String} objCode    One of object codes from {@link https://developers.workfront.com/api-docs/api-explorer/|Workfront API Explorer}\n     * @param {String} query    A query to execute. A list of allowed named queries are available within the {@link https://developers.workfront.com/api-docs/api-explorer/|Workfront API Explorer} under \"actions\" for each object.\n     * @param {Object} [queryArgs]    Optional. Arguments for the action. See {@link https://developers.workfront.com/api-docs/api-explorer/|Workfront API Explorer} for the list of valid arguments\n     * @param {String|String[]} fields    Which fields to return. See {@link https://developers.workfront.com/api-docs/api-explorer/|Workfront API Explorer} for the list of available fields for the given objCode.\n     * @returns {Promise}    A promise which will resolved with received data if everything went ok and rejected with error info otherwise\n     */\n    namedQuery(objCode: string, query: string, queryArgs?: object, fields?: TFields) {\n        return this.request(objCode + '/' + query, queryArgs, fields, Api.Methods.GET)\n    }\n\n    /**\n     * Deletes an object\n     * @memberOf Api\n     * @param {String} objCode    One of object codes from {@link https://developers.workfront.com/api-docs/api-explorer/|Workfront API Explorer}\n     * @param {String} objID    ID of object\n     * @param {Boolean} [bForce]    Pass true to cause the server to remove the specified data and its dependants\n     * @returns {Promise}    A promise which will resolved if everything went ok and rejected otherwise\n     */\n    remove(objCode: string, objID: string, bForce?: boolean): Promise<void> {\n        const params = bForce ? {force: true} : null\n        const req = this.request(objCode + '/' + objID, params, null, Api.Methods.DELETE)\n\n        if (this._uriGenerationMode) {\n            return req\n        } else {\n            return new Promise<void>((resolve, reject) => {\n                ;(req as Promise<any>).then((result) => {\n                    if (result && result.success) {\n                        resolve()\n                    } else {\n                        reject()\n                    }\n                }, reject)\n            })\n        }\n    }\n\n    /**\n     * Performs report request, where only the aggregate of some field is desired, with one or more groupings.\n     * @memberOf Api\n     * @param {String} objCode    One of object codes from {@link https://developers.workfront.com/api-docs/api-explorer/|Workfront API Explorer}\n     * @param {Object} query    An object with search criteria and aggregate functions\n     * @param {Boolean} [useHttpPost=false] Whenever to use POST to send query params\n     * @return {Promise}    A promise which will resolved with results if everything went ok and rejected otherwise\n     */\n    report(objCode: string, query: object, useHttpPost = false) {\n        let reportQuery, method\n        if (useHttpPost) {\n            reportQuery = {...query, method: Api.Methods.GET}\n            method = Api.Methods.POST\n        } else {\n            reportQuery = query\n            method = Api.Methods.GET\n        }\n        return this.request(objCode + '/report', reportQuery, null, method)\n    }\n\n    /**\n     * Do the request using Fetch API.\n     * @memberOf Api\n     * @param {String} path     URI path where the request calls\n     * @param {Object} params   An object with params\n     * @param {Object} [fields] Fields to query for the request\n     * @param {String} [method=GET] The method which the request will do (GET|POST|PUT|DELETE)\n     * @return {Promise}    A promise which will resolved with results if everything went ok and rejected otherwise\n     */\n    request(\n        path: string,\n        params,\n        fields: TFields = [],\n        method: string = Api.Methods.GET\n    ): Promise<any> {\n        const clonedParams = {...params}\n\n        const options = this.getOptions(\n            path,\n            clonedParams,\n            this._uriGenerationMode ? Api.Methods.GET : method\n        )\n\n        const stringifiedFields = this.getFields(fields)\n        if (stringifiedFields) {\n            clonedParams.fields = stringifiedFields\n        }\n\n        const headers = this.getHeaders()\n\n        const {bodyParams, queryString, contentType} = this.populateQueryStringAndBodyParams(\n            clonedParams,\n            options\n        )\n        if (contentType) {\n            headers.append('Content-Type', contentType)\n        }\n\n        if (this._uriGenerationMode) {\n            let appendGetMethod = ''\n            if (queryString.indexOf('method=') === -1) {\n                appendGetMethod = (queryString === '' ? '?' : '&') + 'method=' + Api.Methods.GET\n            }\n            // @ts-ignore-line\n            return path + queryString + appendGetMethod\n        }\n        return makeFetchCall(options.url + options.path + queryString, {\n            headers,\n            body: bodyParams,\n            method: options.method,\n        })\n    }\n\n    /**\n     * Used for object retrieval by multiple search criteria.\n     * @memberOf Api\n     * @param {String} objCode    One of object codes from {@link https://developers.workfront.com/api-docs/api-explorer/|Workfront API Explorer}\n     * @param {Object} [query]    An object with search criteria\n     * @param {String|String[]} [fields]    Which fields to return. See {@link https://developers.workfront.com/api-docs/api-explorer/|Workfront API Explorer} for the list of available fields for the given objCode.\n     * @param {Boolean} [useHttpPost=false] Whenever to use POST to send query params\n     * @return {Promise}    A promise which will resolved with search results if everything went ok and rejected otherwise\n     */\n    search(objCode: string, query?: object, fields?: TFields, useHttpPost = false) {\n        let searchQuery, method\n        if (useHttpPost) {\n            searchQuery = {...query, method: Api.Methods.GET}\n            method = Api.Methods.POST\n        } else {\n            searchQuery = query\n            method = Api.Methods.GET\n        }\n        return this.request(objCode + '/search', searchQuery, fields, method)\n    }\n\n    /**\n     * Performs batch call to the API.\n     * @memberOf Api\n     *\n     * @param {(batchApi: IBatchApi) => string[]} uriCollector   A function which will be invoked with api instance.\n     *     This instance is special, as all methods there return a url string instead of making a backend call.\n     *     `uriCollector` should return an array of uris to be executed in batch.\n     *     So, for example, one may return `[batchApi.metadata(), batchApi.count(...)]` from `uriCollector`.\n     *     That will mean `call metadata() method` and then `call count() method`.\n     *\n     * @param {boolean} isAtomic    Pass true if you want all operations to happen in the same transaction.\n     *     There is a limitation, however. Atomic batch operations can only return success or error.\n     *\n     * @param {boolean} isConcurrent  Requests to the DB are made asynchronously.\n     *\n     * @returns {Promise<any[] | void>}\n     */\n    batch(\n        uriCollector: (batchApi: IBatchApi) => string[],\n        isAtomic?: false,\n        isConcurrent?: boolean\n    ): Promise<any[]>\n    batch(\n        uriCollector: (batchApi: IBatchApi) => string[],\n        isAtomic?: true,\n        isConcurrent?: boolean\n    ): Promise<void>\n    batch(\n        uriCollector: (batchApi: IBatchApi) => string[],\n        isAtomic?: boolean,\n        isConcurrent?: boolean\n    ): Promise<any[] | void> {\n        const batchApi = batchApiFactory(this)\n        const uris = uriCollector(batchApi)\n        if (uris.length === 0) {\n            return Promise.resolve(isAtomic ? undefined : [])\n        }\n        const req = this.request(\n            '/batch',\n            {\n                atomic: !!isAtomic,\n                uri: uris,\n                concurrent: !!isConcurrent,\n            },\n            undefined,\n            Api.Methods.POST\n        )\n        if (isAtomic) {\n            return req.then((result) => {\n                if (result && result.success) {\n                    return undefined\n                }\n                throw new Error()\n            })\n        }\n        return req.then((results) => {\n            return results.map((resultItem) => resultItem.data)\n        })\n    }\n\n    /**\n     * Sets a current API key for future requests\n     * @memberOf Api\n     * @return {string} returns the given api key value\n     */\n    setApiKey(apiKey) {\n        return (this._httpOptions.headers.apiKey = apiKey)\n    }\n\n    /**\n     * Sets a sessionID in the headers or removes sessionID if passed argument is undefined\n     * @memberOf Api\n     * @param {String|undefined} sessionID   sessionID to set\n     */\n    setSessionID(sessionID) {\n        if (sessionID) {\n            this._httpOptions.headers.sessionID = sessionID\n        } else {\n            delete this._httpOptions.headers.sessionID\n        }\n    }\n\n    /**\n     * Sets a 'X-XSRF-TOKEN' in the headers or removes 'X-XSRF-TOKEN' if passed argument is undefined\n     * @memberOf Api\n     * @param {String|undefined} xsrfToken   X-XSRF-TOKEN to set\n     */\n    setXSRFToken(xsrfToken?: string) {\n        if (xsrfToken) {\n            this._httpOptions.headers['X-XSRF-TOKEN'] = xsrfToken\n        } else {\n            delete this._httpOptions.headers['X-XSRF-TOKEN']\n        }\n    }\n\n    uploadFileContent(fileContent, filename: string) {\n        const data = new FormData()\n        data.append('uploadedFile', fileContent, filename)\n        return this.request('upload', data, null, Api.Methods.POST)\n    }\n\n    protected getHeaders() {\n        const headers = new Headers()\n        headers.append('X-Requested-With', 'XMLHttpRequest')\n        if (this._httpOptions.headers.sessionID) {\n            headers.append('sessionID', this._httpOptions.headers.sessionID)\n        } else if (this._httpOptions.headers['X-XSRF-TOKEN']) {\n            headers.append('X-XSRF-TOKEN', this._httpOptions.headers['X-XSRF-TOKEN'])\n        } else if (this._httpOptions.headers.apiKey) {\n            headers.append('apiKey', this._httpOptions.headers.apiKey)\n        }\n        return headers\n    }\n\n    private getFields(fields: TFields): string | undefined {\n        if (typeof fields === 'string') {\n            return fields\n        }\n        if (Array.isArray(fields)) {\n            return fields.join(',')\n        }\n    }\n\n    private getOptions(path, clonedParams, method) {\n        const options = {...this._httpOptions}\n\n        if (options.alwaysUseGet && path !== 'login') {\n            clonedParams.method = method\n            options.method = Api.Methods.GET\n        } else {\n            options.method = method\n        }\n\n        if (path.indexOf('/') !== 0) {\n            path = '/' + path\n        }\n        options.path = this._httpOptions.path + path\n        return options\n    }\n\n    private populateQueryStringAndBodyParams(clonedParams, options) {\n        let bodyParams = null,\n            queryString = '',\n            contentType = null\n        if (typeof FormData !== 'undefined' && clonedParams instanceof FormData) {\n            bodyParams = clonedParams\n        } else if (\n            this.serverAcceptsJSON &&\n            typeof clonedParams.updates === 'object' &&\n            (options.method === Api.Methods.POST || options.method === Api.Methods.PUT)\n        ) {\n            contentType = 'application/json'\n            bodyParams = JSON.stringify(clonedParams.updates)\n\n            delete clonedParams.updates\n            const qs = queryStringify(clonedParams)\n            if (qs) {\n                queryString = '?' + qs\n            }\n        } else {\n            contentType = 'application/x-www-form-urlencoded'\n            if (\n                clonedParams.hasOwnProperty('updates') &&\n                typeof clonedParams.updates !== 'string'\n            ) {\n                clonedParams.updates = JSON.stringify(clonedParams.updates)\n            }\n            bodyParams = queryStringify(clonedParams)\n            if (options.method === Api.Methods.GET || options.method === Api.Methods.DELETE) {\n                if (bodyParams) {\n                    queryString = '?' + bodyParams\n                }\n                bodyParams = null\n            }\n        }\n        return {\n            bodyParams,\n            queryString,\n            contentType,\n        }\n    }\n}\n\nconst queryStringify = function (params) {\n    return Object.keys(params)\n        .reduce(function (a, k) {\n            if (Array.isArray(params[k])) {\n                params[k].forEach(function (param) {\n                    a.push(k + '=' + encodeURIComponent(param))\n                })\n            } else {\n                a.push(k + '=' + encodeURIComponent(params[k]))\n            }\n            return a\n        }, [])\n        .join('&')\n}\n\nexport interface IBatchApi {\n    copy: (\n        objCode: string,\n        objID: string,\n        updates: object,\n        fields?: TFields,\n        options?: string[]\n    ) => string\n    count: (objCode: string, query?: object) => string\n    create: (objCode: string, params: any, fields?: TFields) => string\n    edit: (objCode: string, objID: string, updates: any, fields?: TFields) => string\n    editMultiple: (objCode: string, updates: any[], fields?: TFields) => string\n    execute: (objCode: string, objID: string | null, action: string, actionArgs?: object) => string\n    get: (objCode: string, objIDs: string | string[], fields?: TFields) => string\n    metadata: (objCode?: string, fields?: TFields) => string\n    namedQuery: (objCode: string, query: string, queryArgs?: object, fields?: TFields) => string\n    remove: (objCode: string, objID: string, bForce?: boolean) => string\n    report: (objCode: string, query: object) => string\n    request: (path: string, params, fields?: TFields, method?: string) => string\n    search: (objCode: string, query?: object, fields?: TFields) => string\n}\n\nfunction batchApiFactory(api: Api): IBatchApi {\n    const apiClone = Object.create(api) as Api\n    apiClone._uriGenerationMode = true\n    return {\n        copy: (\n            objCode: string,\n            objID: string,\n            updates: object,\n            fields?: TFields,\n            options?: string[]\n        ) => {\n            return apiClone.copy(objCode, objID, updates, fields, options) as any as string\n        },\n        count: (objCode: string, query?: object) => {\n            return apiClone.count(objCode, query) as any as string\n        },\n        create: (objCode: string, params: any, fields?: TFields) => {\n            return apiClone.create(objCode, params, fields) as any as string\n        },\n        edit: (objCode: string, objID: string, updates: any, fields?: TFields) => {\n            return apiClone.edit(objCode, objID, updates, fields) as any as string\n        },\n        editMultiple: (objCode: string, updates: any[], fields?: TFields) => {\n            return apiClone.editMultiple(objCode, updates, fields) as any as string\n        },\n        execute: (objCode: string, objID: string | null, action: string, actionArgs?: object) => {\n            return apiClone.execute(objCode, objID, action, actionArgs) as any as string\n        },\n        get: (objCode: string, objIDs: string | string[], fields?: TFields) => {\n            return apiClone.get(objCode, objIDs, fields) as any as string\n        },\n        metadata: (objCode?: string, fields?: TFields) => {\n            return apiClone.metadata(objCode, fields) as any as string\n        },\n        namedQuery: (objCode: string, query: string, queryArgs?: object, fields?: TFields) => {\n            return apiClone.namedQuery(objCode, query, queryArgs, fields) as any as string\n        },\n        remove: (objCode: string, objID: string, bForce?: boolean) => {\n            return apiClone.remove(objCode, objID, bForce) as any as string\n        },\n        report: (objCode: string, query: object) => {\n            return apiClone.report(objCode, query) as any as string\n        },\n        request: (path: string, params, fields?: TFields, method: string = Api.Methods.GET) => {\n            return apiClone.request(path, params, fields, method) as any as string\n        },\n        search: (objCode: string, query?: object, fields?: TFields) => {\n            return apiClone.search(objCode, query, fields, false) as any as string\n        },\n    }\n}\n\nexport type TSuccessHandler<T = any> = (response: any) => Promise<T>\nexport type TFailureHandler = (err: any) => never\n\nexport function makeFetchCall(url: string, fetchOptions: RequestInit) {\n    return fetch(url, {...fetchOptions, credentials: 'same-origin'}).then(\n        ResponseHandler.success,\n        ResponseHandler.failure\n    )\n}\n\nexport const ResponseHandler: {\n    success: TSuccessHandler<any>\n    failure: TFailureHandler\n} = {\n    success: (response) => {\n        if (response.ok) {\n            return response.json().then((data) => {\n                if (data.error) {\n                    throw {\n                        status: response.status,\n                        message: data.error.message,\n                    }\n                }\n                return data.data\n            })\n        } else {\n            return response.json().then(\n                (data) => {\n                    throw {\n                        status: response.status,\n                        message: data.error.message,\n                    }\n                },\n                () => {\n                    throw {\n                        status: response.status,\n                        message: response.statusText,\n                    }\n                }\n            )\n        }\n    },\n    failure: (err) => {\n        throw {\n            message: err.message || err.statusText,\n        }\n    },\n}\n","/**\n * Copyright 2015 Workfront\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\")\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport * as NodeFormData from 'form-data'\nimport 'isomorphic-fetch'\nimport {Readable} from 'stream'\nimport {Api as BaseApi, makeFetchCall, ResponseHandler} from './Api'\n\n/**\n * Starting from version 2.0 API allows users to upload files.\n * The server will return the JSON data which includes 'handle' of uploaded file.\n * Returned 'handle' can be passed to create() method to create a new document.\n * This method is not available for browser execution environments and it is available only for Node.\n * @author Hovhannes Babayan <bhovhannes at gmail dot com>\n * @author Sassoun Derderian <citizen dot sas at gmail dot com>\n * @memberOf Api\n * @param {fs.ReadStream} stream    A readable stream with file contents\n * @param {String} filename Override the filename\n */\nclass NodeApi extends BaseApi {\n    constructor(options) {\n        super(options)\n    }\n\n    uploadFromStream(stream: Readable, filename: string) {\n        const data = new NodeFormData()\n        data.append('uploadedFile', stream, filename)\n        return makeFetchCall(this._httpOptions.url + this._httpOptions.path + '/upload', {\n            headers: this.getHeaders(),\n            body: data as any,\n            method: BaseApi.Methods.POST,\n        })\n    }\n}\n\nexport {ResponseHandler, NodeApi, NodeApi as Api, makeFetchCall}\n\nexport default {\n    NodeApi,\n    ResponseHandler,\n    Api: NodeApi,\n}\n"],"names":["__assign","INTERNAL_PREFIX","__extends","NodeFormData","BaseApi"],"mappings":"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"}