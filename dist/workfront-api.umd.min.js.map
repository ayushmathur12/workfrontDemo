{"version":3,"file":"workfront-api.umd.min.js","sources":["../node_modules/tslib/tslib.es6.js","../src/Api.ts","../node_modules/workfront-api-constants/dist/constants.js"],"sourcesContent":["/******************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    if (typeof b !== \"function\" && b !== null)\r\n        throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __esDecorate(ctor, descriptorIn, decorators, contextIn, initializers, extraInitializers) {\r\n    function accept(f) { if (f !== void 0 && typeof f !== \"function\") throw new TypeError(\"Function expected\"); return f; }\r\n    var kind = contextIn.kind, key = kind === \"getter\" ? \"get\" : kind === \"setter\" ? \"set\" : \"value\";\r\n    var target = !descriptorIn && ctor ? contextIn[\"static\"] ? ctor : ctor.prototype : null;\r\n    var descriptor = descriptorIn || (target ? Object.getOwnPropertyDescriptor(target, contextIn.name) : {});\r\n    var _, done = false;\r\n    for (var i = decorators.length - 1; i >= 0; i--) {\r\n        var context = {};\r\n        for (var p in contextIn) context[p] = p === \"access\" ? {} : contextIn[p];\r\n        for (var p in contextIn.access) context.access[p] = contextIn.access[p];\r\n        context.addInitializer = function (f) { if (done) throw new TypeError(\"Cannot add initializers after decoration has completed\"); extraInitializers.push(accept(f || null)); };\r\n        var result = (0, decorators[i])(kind === \"accessor\" ? { get: descriptor.get, set: descriptor.set } : descriptor[key], context);\r\n        if (kind === \"accessor\") {\r\n            if (result === void 0) continue;\r\n            if (result === null || typeof result !== \"object\") throw new TypeError(\"Object expected\");\r\n            if (_ = accept(result.get)) descriptor.get = _;\r\n            if (_ = accept(result.set)) descriptor.set = _;\r\n            if (_ = accept(result.init)) initializers.push(_);\r\n        }\r\n        else if (_ = accept(result)) {\r\n            if (kind === \"field\") initializers.push(_);\r\n            else descriptor[key] = _;\r\n        }\r\n    }\r\n    if (target) Object.defineProperty(target, contextIn.name, descriptor);\r\n    done = true;\r\n};\r\n\r\nexport function __runInitializers(thisArg, initializers, value) {\r\n    var useValue = arguments.length > 2;\r\n    for (var i = 0; i < initializers.length; i++) {\r\n        value = useValue ? initializers[i].call(thisArg, value) : initializers[i].call(thisArg);\r\n    }\r\n    return useValue ? value : void 0;\r\n};\r\n\r\nexport function __propKey(x) {\r\n    return typeof x === \"symbol\" ? x : \"\".concat(x);\r\n};\r\n\r\nexport function __setFunctionName(f, name, prefix) {\r\n    if (typeof name === \"symbol\") name = name.description ? \"[\".concat(name.description, \"]\") : \"\";\r\n    return Object.defineProperty(f, \"name\", { configurable: true, value: prefix ? \"\".concat(prefix, \" \", name) : name });\r\n};\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (g && (g = 0, op[0] && (_ = 0)), _) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport var __createBinding = Object.create ? (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    var desc = Object.getOwnPropertyDescriptor(m, k);\r\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\r\n        desc = { enumerable: true, get: function() { return m[k]; } };\r\n    }\r\n    Object.defineProperty(o, k2, desc);\r\n}) : (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    o[k2] = m[k];\r\n});\r\n\r\nexport function __exportStar(m, o) {\r\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(o, p)) __createBinding(o, m, p);\r\n}\r\n\r\nexport function __values(o) {\r\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\r\n    if (m) return m.call(o);\r\n    if (o && typeof o.length === \"number\") return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\n/** @deprecated */\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\n/** @deprecated */\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n}\r\n\r\nexport function __spreadArray(to, from, pack) {\r\n    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\r\n        if (ar || !(i in from)) {\r\n            if (!ar) ar = Array.prototype.slice.call(from, 0, i);\r\n            ar[i] = from[i];\r\n        }\r\n    }\r\n    return to.concat(ar || Array.prototype.slice.call(from));\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: false } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nvar __setModuleDefault = Object.create ? (function(o, v) {\r\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\r\n}) : function(o, v) {\r\n    o[\"default\"] = v;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\r\n    __setModuleDefault(result, mod);\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n\r\nexport function __classPrivateFieldGet(receiver, state, kind, f) {\r\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\r\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\r\n    return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\r\n}\r\n\r\nexport function __classPrivateFieldSet(receiver, state, value, kind, f) {\r\n    if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\r\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\r\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\r\n    return (kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;\r\n}\r\n\r\nexport function __classPrivateFieldIn(state, receiver) {\r\n    if (receiver === null || (typeof receiver !== \"object\" && typeof receiver !== \"function\")) throw new TypeError(\"Cannot use 'in' operator on non-object\");\r\n    return typeof state === \"function\" ? receiver === state : state.has(receiver);\r\n}\r\n","/**\n * Copyright 2015 Workfront\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\")\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @author Hovhannes Babayan <bhovhannes at gmail dot com>\n * @author Sassoun Derderian <citizen.sas at gmail dot com>\n */\n\nimport {INTERNAL_PREFIX} from 'workfront-api-constants'\n\nexport interface IHttpOptions {\n    path?: string\n    method?: string\n    url: string\n    alwaysUseGet?: boolean\n    headers: {\n        sessionID?: string\n        'X-XSRF-TOKEN'?: string\n        apiKey?: string\n    }\n}\nexport interface IApiConfig {\n    url: string\n    version?: string\n    alwaysUseGet?: boolean\n    apiKey?: string\n    headers?: {[key: string]: string}\n}\nexport type TFields = string | string[]\n\n/**\n * Configuration for the Api constructor\n * @typedef {Object} config\n * @property {String} url - Required. A url to Workfront server (for example: http://localhost:8080)\n * @property {String} [version=internal] - Which version of api to use. At the moment of writing can be 2.0, 3.0, ..., 8.0. Pass 'unsupported' to use Workfront latest API (maybe unstable)\n * @property {Boolean} [alwaysUseGet=false] - Will cause the api to make every request as a GET with params in the query string and add method=DESIRED_METHOD_TYPE in the query string. Some Workfront urls will have issues with PUT and DELETE calls if this value is false\n * @property {String} [apiKey] - It is used to pass apiKey with every api request headers\n * @property {Object} [headers] - An key-value object that sets custom headers (for example: {'user-agent': DESIRED_USER_AGENT_NAME})\n */\n\n/**\n * Creates new Api instance.\n * @param {Object} config   An object with the following keys:<br/>\n * @constructor\n */\nexport class Api {\n    static Methods = {\n        GET: 'GET',\n        PUT: 'PUT',\n        DELETE: 'DELETE',\n        POST: 'POST',\n    }\n    _httpOptions: IHttpOptions\n    serverAcceptsJSON: boolean\n\n    _uriGenerationMode: boolean\n\n    constructor(config: IApiConfig) {\n        this.serverAcceptsJSON = true\n        this._uriGenerationMode = false\n        this._httpOptions = {\n            url: config.url,\n            alwaysUseGet: config.alwaysUseGet,\n            headers: config.headers || {},\n        }\n        if (config.apiKey) {\n            this._httpOptions.headers.apiKey = config.apiKey\n        }\n        // Append version to path if provided\n        let path\n        const {\n            version = 'internal',\n        }: {\n            version?: string\n        } = config\n        if (['internal', 'unsupported', 'asp'].indexOf(version) >= 0) {\n            path = '/attask/api-' + version\n        } else {\n            path = '/attask/api/v' + version\n            if (version === '2.0' || version === '3.0' || version === '4.0') {\n                this.serverAcceptsJSON = false\n            }\n        }\n        this._httpOptions.path = path\n    }\n\n    /**\n     * Used to obtain an API key\n     * @memberOf Api\n     * @param {String} username    A username in Workfront\n     * @param {String} password    Password to use\n     * @param {String} subdomain    Sub-domain to use\n     * @return {Promise}    A promise which will resolved with API key if everything went ok and rejected otherwise\n     */\n    getApiKey(username: string, password: string, subdomain?: string): Promise<string> {\n        const loginParams = {\n            username,\n            password,\n        }\n        if (subdomain !== undefined) {\n            loginParams['subdomain'] = subdomain\n        }\n        return new Promise<string>((resolve, reject) => {\n            if (typeof this._httpOptions.headers.apiKey !== 'undefined') {\n                resolve(this._httpOptions.headers.apiKey)\n            } else {\n                const req = this.execute('USER', null, 'getApiKey', loginParams)\n                ;(req as Promise<any>).then((getApiKeyData) => {\n                    if (getApiKeyData.result === '') {\n                        const req2 = this.execute('USER', null, 'generateApiKey', loginParams)\n                        ;(req2 as Promise<any>).then((generateApiKeyData) => {\n                            this._httpOptions.headers.apiKey = generateApiKeyData.result\n                            resolve(this._httpOptions.headers.apiKey)\n                        }, reject)\n                    } else {\n                        this._httpOptions.headers.apiKey = getApiKeyData.result\n                        resolve(this._httpOptions.headers.apiKey)\n                    }\n                }, reject)\n            }\n        })\n    }\n\n    /**\n     * Copies an existing object with making changes on a copy.\n     * Copying is supported only for some objects. The {@link https://developers.workfront.com/api-docs/api-explorer/|Workfront API Explorer} page displays which objects support the Copy action.\n     * @memberOf Api\n     * @param {String} objCode    One of object codes from {@link https://developers.workfront.com/api-docs/api-explorer/|Workfront API Explorer}\n     * @param {String} objID    ID of object to copy\n     * @param {Object} updates    Which fields to set on copied object. See {@link https://developers.workfront.com/api-docs/api-explorer/|Workfront API Explorer} for the list of available fields for the given objCode.\n     * @param {String|String[]} [fields]    Which fields to return. See {@link https://developers.workfront.com/api-docs/api-explorer/|Workfront API Explorer} for the list of available fields for the given objCode.\n     * @param {String[]} options    A list of options that are attached to the copy request (object specific)\n     * @return {Promise}    A promise which will resolved with results if everything went ok and rejected otherwise\n     */\n    copy(objCode: string, objID: string, updates: object, fields?: TFields, options?: string[]) {\n        const params: {\n            copySourceID: string\n            updates?: string\n            options?: string\n        } = {\n            copySourceID: objID,\n        }\n        if (updates) {\n            params.updates = JSON.stringify(updates)\n        }\n        if (options) {\n            params.options = JSON.stringify(options)\n        }\n        return this.request(objCode, params, fields, Api.Methods.POST)\n    }\n\n    /**\n     * Used to retrieve number of objects matching given search criteria\n     * @memberOf Api\n     * @param {String} objCode\n     * @param {[Object]} query    An object with search criteria\n     * @return {Promise}\n     */\n    count(objCode: string, query?: object): Promise<number> {\n        const req = this.request(objCode + '/count', query, null, Api.Methods.GET)\n        if (this._uriGenerationMode) {\n            return req\n        }\n        return (req as Promise<any>).then(function (data) {\n            return data.count\n        })\n    }\n\n    /**\n     * Invalidates the current API key.\n     * Call this to be able to retrieve a new one using getApiKey().\n     * @memberOf Api\n     * @return {Promise}    A promise which will resolved if everything went ok and rejected otherwise\n     */\n    clearApiKey() {\n        return new Promise<void>((resolve, reject) => {\n            const req = this.execute('USER', null, 'clearApiKey')\n            req.then((result) => {\n                if (result) {\n                    delete this._httpOptions.headers.apiKey\n                    resolve()\n                } else {\n                    reject()\n                }\n            })\n        })\n    }\n\n    /**\n     * Creates a new object.\n     * @memberOf Api\n     * @param {String} objCode    One of object codes from {@link https://developers.workfront.com/api-docs/api-explorer/|Workfront API Explorer}\n     * @param {Object} params    Values of fields to be set for the new object. See {@link https://developers.workfront.com/api-docs/api-explorer/|Workfront API Explorer} for the list of available fields for the given objCode.\n     * @param {String|String[]} [fields]    Which fields of newly created object to return. See {@link https://developers.workfront.com/api-docs/api-explorer/|Workfront API Explorer} for the list of available fields for the given objCode.\n     * @returns {Promise}    A promise which will resolved with the ID and any other specified fields of newly created object\n     */\n    create(objCode: string, params: any, fields?: TFields) {\n        if (params.hasOwnProperty('updates')) {\n            return this.request(objCode, params, fields, Api.Methods.POST)\n        }\n        return this.request(objCode, {updates: params}, fields, Api.Methods.POST)\n    }\n\n    /**\n     * Edits an existing object\n     * @memberOf Api\n     * @param {String} objCode    One of object codes from {@link https://developers.workfront.com/api-docs/api-explorer/|Workfront API Explorer}\n     * @param {String} objID    ID of object to modify\n     * @param {Object} updates    Which fields to set. See {@link https://developers.workfront.com/api-docs/api-explorer/|Workfront API Explorer} for the list of available fields for the given objCode.\n     * @param {String|String[]} [fields]    Which fields to return. See {@link https://developers.workfront.com/api-docs/api-explorer/|Workfront API Explorer} for the list of available fields for the given objCode.\n     * @return {Promise}    A promise which will resolved with results if everything went ok and rejected otherwise\n     */\n    edit(objCode: string, objID: string, updates: any, fields?: TFields) {\n        if (updates.hasOwnProperty('updates')) {\n            return this.request(objCode + '/' + objID, updates, fields, Api.Methods.PUT)\n        }\n        return this.request(objCode + '/' + objID, {updates: updates}, fields, Api.Methods.PUT)\n    }\n\n    /**\n     * Edit multiple existing objects\n     * @memberOf Api\n     * @param {String} objCode    One of object codes from {@link https://developers.workfront.com/api-docs/api-explorer/|Workfront API Explorer}\n     * @param {Array} updates    Array of fields for each object to be edited. See {@link https://developers.workfront.com/api-docs/api-explorer/|Workfront API Explorer} for the list of available fields for the given objCode.\n     * @param {String|String[]} [fields]    Which fields to return. See {@link https://developers.workfront.com/api-docs/api-explorer/|Workfront API Explorer} for the list of available fields for the given objCode.\n     * @return {Promise}    A promise which will resolved with results if everything went ok and rejected otherwise\n     */\n    editMultiple(objCode: string, updates: any[], fields?: TFields) {\n        return this.request(objCode, {updates: updates}, fields, Api.Methods.PUT)\n    }\n\n    /**\n     * Executes an action for the given object\n     * @memberOf Api\n     * @param {String} objCode    One of object codes from {@link https://developers.workfront.com/api-docs/api-explorer/|Workfront API Explorer}\n     * @param {String|null} objID    ID of object. Optional, pass null or undefined to omit\n     * @param {String} action    An action to execute. A list of allowed actions are available within the {@link https://developers.workfront.com/api-docs/api-explorer/|Workfront API Explorer} under \"actions\" for each object.\n     * @param {Object} [actionArgs]    Optional. Arguments for the action. See {@link https://developers.workfront.com/api-docs/api-explorer/|Workfront API Explorer} for the list of valid arguments\n     * @returns {Promise}    A promise which will resolved if everything went ok and rejected otherwise\n     */\n    execute(objCode: string, objID: string | null, action: string, actionArgs?: object) {\n        let endPoint = objCode\n        let params: any = {method: Api.Methods.PUT}\n        if (objID) {\n            endPoint += '/' + objID + '/' + action\n        } else {\n            params.action = action\n        }\n        if (actionArgs) {\n            params = {...params, ...actionArgs}\n        }\n        return this.request(endPoint, params, null, Api.Methods.POST)\n    }\n\n    /**\n     * Used for retrieve an object or multiple objects.\n     * @memberOf Api\n     * @param {String} objCode    One of object codes from {@link https://developers.workfront.com/api-docs/api-explorer/|Workfront API Explorer}\n     * @param {String|Array} objIDs    Either one or multiple object ids\n     * @param {String|String[]} fields    Which fields to return. See {@link https://developers.workfront.com/api-docs/api-explorer/|Workfront API Explorer} for the list of available fields for the given objCode.\n     * @return {Promise}    A promise which will resolved with results if everything went ok and rejected otherwise\n     */\n    get(objCode: string, objIDs: string | string[], fields?: TFields) {\n        if (typeof objIDs === 'string') {\n            objIDs = [objIDs]\n        }\n        let endPoint = objCode,\n            params = null\n        if (objIDs.length === 1) {\n            if (objIDs[0].indexOf(INTERNAL_PREFIX) === 0) {\n                params = {id: objIDs[0]}\n            } else {\n                endPoint += '/' + objIDs[0]\n            }\n        } else {\n            params = {id: objIDs}\n        }\n        return this.request(endPoint, params, fields, Api.Methods.GET)\n    }\n\n    /**\n     * Logs in into Workfront. Should be a first call to Workfront API.\n     * Other calls should be made after this one will be completed.\n     * @memberOf Api\n     * @param {String} username    A username in Workfront\n     * @param {String} password    Password to use\n     * @param {String} subdomain    Sub-domain to use\n     * @return {Promise}    A promise which will resolved with logged in user data if everything went ok and rejected otherwise\n     */\n    login(username: string, password: string, subdomain?: string) {\n        const params = {username, password}\n        if (subdomain !== undefined) {\n            params['subdomain'] = subdomain\n        }\n        const req = this.request('login', params, null, Api.Methods.POST)\n        return (req as Promise<any>).then((data) => {\n            this.setSessionID(data.sessionID)\n            return data\n        })\n    }\n\n    /**\n     * Logs out from Workfront\n     * @memberOf Api\n     * @return {Promise}    A promise which will resolved if everything went ok and rejected otherwise\n     */\n    logout(): Promise<void> {\n        return new Promise<void>((resolve, reject) => {\n            const req = this.request('logout', null, null, Api.Methods.GET)\n            req.then((result) => {\n                if (result && result.success) {\n                    delete this._httpOptions.headers['X-XSRF-TOKEN']\n                    delete this._httpOptions.headers.sessionID\n                    resolve()\n                } else {\n                    reject()\n                }\n            })\n        })\n    }\n\n    /**\n     * Retrieves API metadata for an object.\n     * @memberOf Api\n     * @param {String} [objCode]    One of object codes from {@link https://developers.workfront.com/api-docs/api-explorer/|Workfront API Explorer}. If omitted will return list of objects available in API.\n     * @param {String|String[]} fields    Which fields to return.\n     * @return {Promise}    A promise which will resolved with object metadata if everything went ok and rejected otherwise\n     */\n    metadata(objCode?: string, fields?: TFields) {\n        let path = '/metadata'\n        if (objCode) {\n            path = objCode + path\n        }\n        return this.request(path, null, fields, Api.Methods.GET)\n    }\n\n    /**\n     * Executes a named query for the given obj code\n     * @memberOf Api\n     * @param {String} objCode    One of object codes from {@link https://developers.workfront.com/api-docs/api-explorer/|Workfront API Explorer}\n     * @param {String} query    A query to execute. A list of allowed named queries are available within the {@link https://developers.workfront.com/api-docs/api-explorer/|Workfront API Explorer} under \"actions\" for each object.\n     * @param {Object} [queryArgs]    Optional. Arguments for the action. See {@link https://developers.workfront.com/api-docs/api-explorer/|Workfront API Explorer} for the list of valid arguments\n     * @param {String|String[]} fields    Which fields to return. See {@link https://developers.workfront.com/api-docs/api-explorer/|Workfront API Explorer} for the list of available fields for the given objCode.\n     * @returns {Promise}    A promise which will resolved with received data if everything went ok and rejected with error info otherwise\n     */\n    namedQuery(objCode: string, query: string, queryArgs?: object, fields?: TFields) {\n        return this.request(objCode + '/' + query, queryArgs, fields, Api.Methods.GET)\n    }\n\n    /**\n     * Deletes an object\n     * @memberOf Api\n     * @param {String} objCode    One of object codes from {@link https://developers.workfront.com/api-docs/api-explorer/|Workfront API Explorer}\n     * @param {String} objID    ID of object\n     * @param {Boolean} [bForce]    Pass true to cause the server to remove the specified data and its dependants\n     * @returns {Promise}    A promise which will resolved if everything went ok and rejected otherwise\n     */\n    remove(objCode: string, objID: string, bForce?: boolean): Promise<void> {\n        const params = bForce ? {force: true} : null\n        const req = this.request(objCode + '/' + objID, params, null, Api.Methods.DELETE)\n\n        if (this._uriGenerationMode) {\n            return req\n        } else {\n            return new Promise<void>((resolve, reject) => {\n                ;(req as Promise<any>).then((result) => {\n                    if (result && result.success) {\n                        resolve()\n                    } else {\n                        reject()\n                    }\n                }, reject)\n            })\n        }\n    }\n\n    /**\n     * Performs report request, where only the aggregate of some field is desired, with one or more groupings.\n     * @memberOf Api\n     * @param {String} objCode    One of object codes from {@link https://developers.workfront.com/api-docs/api-explorer/|Workfront API Explorer}\n     * @param {Object} query    An object with search criteria and aggregate functions\n     * @param {Boolean} [useHttpPost=false] Whenever to use POST to send query params\n     * @return {Promise}    A promise which will resolved with results if everything went ok and rejected otherwise\n     */\n    report(objCode: string, query: object, useHttpPost = false) {\n        let reportQuery, method\n        if (useHttpPost) {\n            reportQuery = {...query, method: Api.Methods.GET}\n            method = Api.Methods.POST\n        } else {\n            reportQuery = query\n            method = Api.Methods.GET\n        }\n        return this.request(objCode + '/report', reportQuery, null, method)\n    }\n\n    /**\n     * Do the request using Fetch API.\n     * @memberOf Api\n     * @param {String} path     URI path where the request calls\n     * @param {Object} params   An object with params\n     * @param {Object} [fields] Fields to query for the request\n     * @param {String} [method=GET] The method which the request will do (GET|POST|PUT|DELETE)\n     * @return {Promise}    A promise which will resolved with results if everything went ok and rejected otherwise\n     */\n    request(\n        path: string,\n        params,\n        fields: TFields = [],\n        method: string = Api.Methods.GET\n    ): Promise<any> {\n        const clonedParams = {...params}\n\n        const options = this.getOptions(\n            path,\n            clonedParams,\n            this._uriGenerationMode ? Api.Methods.GET : method\n        )\n\n        const stringifiedFields = this.getFields(fields)\n        if (stringifiedFields) {\n            clonedParams.fields = stringifiedFields\n        }\n\n        const headers = this.getHeaders()\n\n        const {bodyParams, queryString, contentType} = this.populateQueryStringAndBodyParams(\n            clonedParams,\n            options\n        )\n        if (contentType) {\n            headers.append('Content-Type', contentType)\n        }\n\n        if (this._uriGenerationMode) {\n            let appendGetMethod = ''\n            if (queryString.indexOf('method=') === -1) {\n                appendGetMethod = (queryString === '' ? '?' : '&') + 'method=' + Api.Methods.GET\n            }\n            // @ts-ignore-line\n            return path + queryString + appendGetMethod\n        }\n        return makeFetchCall(options.url + options.path + queryString, {\n            headers,\n            body: bodyParams,\n            method: options.method,\n        })\n    }\n\n    /**\n     * Used for object retrieval by multiple search criteria.\n     * @memberOf Api\n     * @param {String} objCode    One of object codes from {@link https://developers.workfront.com/api-docs/api-explorer/|Workfront API Explorer}\n     * @param {Object} [query]    An object with search criteria\n     * @param {String|String[]} [fields]    Which fields to return. See {@link https://developers.workfront.com/api-docs/api-explorer/|Workfront API Explorer} for the list of available fields for the given objCode.\n     * @param {Boolean} [useHttpPost=false] Whenever to use POST to send query params\n     * @return {Promise}    A promise which will resolved with search results if everything went ok and rejected otherwise\n     */\n    search(objCode: string, query?: object, fields?: TFields, useHttpPost = false) {\n        let searchQuery, method\n        if (useHttpPost) {\n            searchQuery = {...query, method: Api.Methods.GET}\n            method = Api.Methods.POST\n        } else {\n            searchQuery = query\n            method = Api.Methods.GET\n        }\n        return this.request(objCode + '/search', searchQuery, fields, method)\n    }\n\n    /**\n     * Performs batch call to the API.\n     * @memberOf Api\n     *\n     * @param {(batchApi: IBatchApi) => string[]} uriCollector   A function which will be invoked with api instance.\n     *     This instance is special, as all methods there return a url string instead of making a backend call.\n     *     `uriCollector` should return an array of uris to be executed in batch.\n     *     So, for example, one may return `[batchApi.metadata(), batchApi.count(...)]` from `uriCollector`.\n     *     That will mean `call metadata() method` and then `call count() method`.\n     *\n     * @param {boolean} isAtomic    Pass true if you want all operations to happen in the same transaction.\n     *     There is a limitation, however. Atomic batch operations can only return success or error.\n     *\n     * @param {boolean} isConcurrent  Requests to the DB are made asynchronously.\n     *\n     * @returns {Promise<any[] | void>}\n     */\n    batch(\n        uriCollector: (batchApi: IBatchApi) => string[],\n        isAtomic?: false,\n        isConcurrent?: boolean\n    ): Promise<any[]>\n    batch(\n        uriCollector: (batchApi: IBatchApi) => string[],\n        isAtomic?: true,\n        isConcurrent?: boolean\n    ): Promise<void>\n    batch(\n        uriCollector: (batchApi: IBatchApi) => string[],\n        isAtomic?: boolean,\n        isConcurrent?: boolean\n    ): Promise<any[] | void> {\n        const batchApi = batchApiFactory(this)\n        const uris = uriCollector(batchApi)\n        if (uris.length === 0) {\n            return Promise.resolve(isAtomic ? undefined : [])\n        }\n        const req = this.request(\n            '/batch',\n            {\n                atomic: !!isAtomic,\n                uri: uris,\n                concurrent: !!isConcurrent,\n            },\n            undefined,\n            Api.Methods.POST\n        )\n        if (isAtomic) {\n            return req.then((result) => {\n                if (result && result.success) {\n                    return undefined\n                }\n                throw new Error()\n            })\n        }\n        return req.then((results) => {\n            return results.map((resultItem) => resultItem.data)\n        })\n    }\n\n    /**\n     * Sets a current API key for future requests\n     * @memberOf Api\n     * @return {string} returns the given api key value\n     */\n    setApiKey(apiKey) {\n        return (this._httpOptions.headers.apiKey = apiKey)\n    }\n\n    /**\n     * Sets a sessionID in the headers or removes sessionID if passed argument is undefined\n     * @memberOf Api\n     * @param {String|undefined} sessionID   sessionID to set\n     */\n    setSessionID(sessionID) {\n        if (sessionID) {\n            this._httpOptions.headers.sessionID = sessionID\n        } else {\n            delete this._httpOptions.headers.sessionID\n        }\n    }\n\n    /**\n     * Sets a 'X-XSRF-TOKEN' in the headers or removes 'X-XSRF-TOKEN' if passed argument is undefined\n     * @memberOf Api\n     * @param {String|undefined} xsrfToken   X-XSRF-TOKEN to set\n     */\n    setXSRFToken(xsrfToken?: string) {\n        if (xsrfToken) {\n            this._httpOptions.headers['X-XSRF-TOKEN'] = xsrfToken\n        } else {\n            delete this._httpOptions.headers['X-XSRF-TOKEN']\n        }\n    }\n\n    uploadFileContent(fileContent, filename: string) {\n        const data = new FormData()\n        data.append('uploadedFile', fileContent, filename)\n        return this.request('upload', data, null, Api.Methods.POST)\n    }\n\n    protected getHeaders() {\n        const headers = new Headers()\n        headers.append('X-Requested-With', 'XMLHttpRequest')\n        if (this._httpOptions.headers.sessionID) {\n            headers.append('sessionID', this._httpOptions.headers.sessionID)\n        } else if (this._httpOptions.headers['X-XSRF-TOKEN']) {\n            headers.append('X-XSRF-TOKEN', this._httpOptions.headers['X-XSRF-TOKEN'])\n        } else if (this._httpOptions.headers.apiKey) {\n            headers.append('apiKey', this._httpOptions.headers.apiKey)\n        }\n        return headers\n    }\n\n    private getFields(fields: TFields): string | undefined {\n        if (typeof fields === 'string') {\n            return fields\n        }\n        if (Array.isArray(fields)) {\n            return fields.join(',')\n        }\n    }\n\n    private getOptions(path, clonedParams, method) {\n        const options = {...this._httpOptions}\n\n        if (options.alwaysUseGet && path !== 'login') {\n            clonedParams.method = method\n            options.method = Api.Methods.GET\n        } else {\n            options.method = method\n        }\n\n        if (path.indexOf('/') !== 0) {\n            path = '/' + path\n        }\n        options.path = this._httpOptions.path + path\n        return options\n    }\n\n    private populateQueryStringAndBodyParams(clonedParams, options) {\n        let bodyParams = null,\n            queryString = '',\n            contentType = null\n        if (typeof FormData !== 'undefined' && clonedParams instanceof FormData) {\n            bodyParams = clonedParams\n        } else if (\n            this.serverAcceptsJSON &&\n            typeof clonedParams.updates === 'object' &&\n            (options.method === Api.Methods.POST || options.method === Api.Methods.PUT)\n        ) {\n            contentType = 'application/json'\n            bodyParams = JSON.stringify(clonedParams.updates)\n\n            delete clonedParams.updates\n            const qs = queryStringify(clonedParams)\n            if (qs) {\n                queryString = '?' + qs\n            }\n        } else {\n            contentType = 'application/x-www-form-urlencoded'\n            if (\n                clonedParams.hasOwnProperty('updates') &&\n                typeof clonedParams.updates !== 'string'\n            ) {\n                clonedParams.updates = JSON.stringify(clonedParams.updates)\n            }\n            bodyParams = queryStringify(clonedParams)\n            if (options.method === Api.Methods.GET || options.method === Api.Methods.DELETE) {\n                if (bodyParams) {\n                    queryString = '?' + bodyParams\n                }\n                bodyParams = null\n            }\n        }\n        return {\n            bodyParams,\n            queryString,\n            contentType,\n        }\n    }\n}\n\nconst queryStringify = function (params) {\n    return Object.keys(params)\n        .reduce(function (a, k) {\n            if (Array.isArray(params[k])) {\n                params[k].forEach(function (param) {\n                    a.push(k + '=' + encodeURIComponent(param))\n                })\n            } else {\n                a.push(k + '=' + encodeURIComponent(params[k]))\n            }\n            return a\n        }, [])\n        .join('&')\n}\n\nexport interface IBatchApi {\n    copy: (\n        objCode: string,\n        objID: string,\n        updates: object,\n        fields?: TFields,\n        options?: string[]\n    ) => string\n    count: (objCode: string, query?: object) => string\n    create: (objCode: string, params: any, fields?: TFields) => string\n    edit: (objCode: string, objID: string, updates: any, fields?: TFields) => string\n    editMultiple: (objCode: string, updates: any[], fields?: TFields) => string\n    execute: (objCode: string, objID: string | null, action: string, actionArgs?: object) => string\n    get: (objCode: string, objIDs: string | string[], fields?: TFields) => string\n    metadata: (objCode?: string, fields?: TFields) => string\n    namedQuery: (objCode: string, query: string, queryArgs?: object, fields?: TFields) => string\n    remove: (objCode: string, objID: string, bForce?: boolean) => string\n    report: (objCode: string, query: object) => string\n    request: (path: string, params, fields?: TFields, method?: string) => string\n    search: (objCode: string, query?: object, fields?: TFields) => string\n}\n\nfunction batchApiFactory(api: Api): IBatchApi {\n    const apiClone = Object.create(api) as Api\n    apiClone._uriGenerationMode = true\n    return {\n        copy: (\n            objCode: string,\n            objID: string,\n            updates: object,\n            fields?: TFields,\n            options?: string[]\n        ) => {\n            return apiClone.copy(objCode, objID, updates, fields, options) as any as string\n        },\n        count: (objCode: string, query?: object) => {\n            return apiClone.count(objCode, query) as any as string\n        },\n        create: (objCode: string, params: any, fields?: TFields) => {\n            return apiClone.create(objCode, params, fields) as any as string\n        },\n        edit: (objCode: string, objID: string, updates: any, fields?: TFields) => {\n            return apiClone.edit(objCode, objID, updates, fields) as any as string\n        },\n        editMultiple: (objCode: string, updates: any[], fields?: TFields) => {\n            return apiClone.editMultiple(objCode, updates, fields) as any as string\n        },\n        execute: (objCode: string, objID: string | null, action: string, actionArgs?: object) => {\n            return apiClone.execute(objCode, objID, action, actionArgs) as any as string\n        },\n        get: (objCode: string, objIDs: string | string[], fields?: TFields) => {\n            return apiClone.get(objCode, objIDs, fields) as any as string\n        },\n        metadata: (objCode?: string, fields?: TFields) => {\n            return apiClone.metadata(objCode, fields) as any as string\n        },\n        namedQuery: (objCode: string, query: string, queryArgs?: object, fields?: TFields) => {\n            return apiClone.namedQuery(objCode, query, queryArgs, fields) as any as string\n        },\n        remove: (objCode: string, objID: string, bForce?: boolean) => {\n            return apiClone.remove(objCode, objID, bForce) as any as string\n        },\n        report: (objCode: string, query: object) => {\n            return apiClone.report(objCode, query) as any as string\n        },\n        request: (path: string, params, fields?: TFields, method: string = Api.Methods.GET) => {\n            return apiClone.request(path, params, fields, method) as any as string\n        },\n        search: (objCode: string, query?: object, fields?: TFields) => {\n            return apiClone.search(objCode, query, fields, false) as any as string\n        },\n    }\n}\n\nexport type TSuccessHandler<T = any> = (response: any) => Promise<T>\nexport type TFailureHandler = (err: any) => never\n\nexport function makeFetchCall(url: string, fetchOptions: RequestInit) {\n    return fetch(url, {...fetchOptions, credentials: 'same-origin'}).then(\n        ResponseHandler.success,\n        ResponseHandler.failure\n    )\n}\n\nexport const ResponseHandler: {\n    success: TSuccessHandler<any>\n    failure: TFailureHandler\n} = {\n    success: (response) => {\n        if (response.ok) {\n            return response.json().then((data) => {\n                if (data.error) {\n                    throw {\n                        status: response.status,\n                        message: data.error.message,\n                    }\n                }\n                return data.data\n            })\n        } else {\n            return response.json().then(\n                (data) => {\n                    throw {\n                        status: response.status,\n                        message: data.error.message,\n                    }\n                },\n                () => {\n                    throw {\n                        status: response.status,\n                        message: response.statusText,\n                    }\n                }\n            )\n        }\n    },\n    failure: (err) => {\n        throw {\n            message: err.message || err.statusText,\n        }\n    },\n}\n","/**\n * Copyright 2016 Workfront\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * @author Hovhannes Babayan <bhovhannes at gmail dot com>\n */\n/**\n * Prefix for identifying a Sort field. Value is \"_1_Sort\" for first sort field, \"_2_Sort\", \"_3_Sort\" ... \"_n_Sort\".\n * @readonly\n * @type {String}\n */\n/**\n * Copyright 2016 Workfront\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */ export var SORT = '_Sort';\n/**\n * Suffix for specifying expression operators (ApiConstants.Operators) on a field. Value is \"_Mod\".\n * @readonly\n * @type {String}\n */\nexport var MOD = '_Mod';\n/**\n * A delimiter which is used to separate field name and its order key.<br/>\n * Can be used for filters, sorting, etc.<br/>\n * Example: <code>{name_1_Sort: 'ASC', id_2_Sort: 'DESC'}</code>\n * @readonly\n * @type {String}\n */\nexport var ORDERDOT = '_';\n/**\n * Key used to specify the index of the first result to return starting with .\n * @readonly\n * @type {String}\n */\nexport var FIRST = \"$$FIRST\";\n/**\n * Key used to specify a limit on the number of results. If this key is present, the value is used.<br/>\n * If this value cannot be parsed or if it is less than or equal to 0, no limit is enforced.<br/>\n * Value is \"$$LIMIT\"<br/>\n * @readonly\n * @type {String}\n */\nexport var LIMIT = \"$$LIMIT\";\n/**\n * Prefix used to identify an Data Extension parameter in the Query framework.<br/>\n * Used for retrieval of custom data fields.<br/>\n * @readonly\n * @type {String}\n */\nexport var DATAEXTENSION = \"DE:\";\n/**\n * Suffix for specifying which fields will be added to the GROUP BY clause in a ReportQuery. Value is \"_GroupBy\".\n * @readonly\n * @type {String}\n */\nexport var GROUPBY = \"_GroupBy\";\n/**\n * Suffix for specifying force \"_GroupBy\". Value is \"$$_ForceGroupBy\".\n */\nexport var FORCE_GROUPBY = \"$$_ForceGroupBy\";\n/**\n * Suffix for specifying aggregate functions in a ReportQuery. Value is \"_AggFunc\".\n */\nexport var AGGFUNC = \"_AggFunc\";\n/**\n * Suffix for specifying comma-separated list of aggregated currency fields for the report\n */\nexport var AGGCURRENCY_FIELDS = \"$$AggCurr\";\nexport var GROUPCURRENCY_FIELDS = \"$$GroupCurr\";\nexport var SORTCURRENCY_FIELDS = \"$$SortCurr\";\nexport var FILTERCURRENCY_FIELDS = \"$$FilterCurr\";\n/**\n * Key used to specify that a GROUP BY query should be done WITH ROLLUP. Value is \"$$ROLLUP\"\n */\nexport var ROLLUP = \"$$ROLLUP\";\n/**\n * Prefix for constants.\n * @readonly\n * @type {String}\n */\nexport var INTERNAL_PREFIX = '$$';\n/**\n * Values which can be used as wildcards\n * @readonly\n * @enum {String}\n */\nexport var WildCards = {\n    /**\n     * Wildcard value for midnight (12:00AM) of the current Date. Wildcards are useful for Saved Searches.<br/>\n     * If this value is passed in for any search value, it is replaced with the current date.<br/>\n     * The following suffixes can also be used to modify this date: [b/e][+/-][# of units][\"h\" (hour)|\"d\" (day)|\"w\" (week)|\"m\" (month)|\"q\" (quarter)|\"y\" (year)]<br/>\n     *    <code>$$TODAY+1d</code> would equal 12:00AM of the next day<br/>\n     *    <code>$$TODAY-1d</code> would equal 12:00AM of the previous day<br/>\n     *    <code>$$TODAY+2w</code> would equal 12:00AM of 2 weeks from today<br/>\n     *    <code>$$TODAY+2m</code> would equal 12:00AM of 2 months from today<br/>\n     *    <code>$$TODAYb</code> \"the beginning of today\" would equal 12:00AM today<br/>\n     *    <code>$$TODAYe</code> \"the end of today\" would equal 12:00AM tomorrow<br/>\n     *    <code>$$TODAYbm</code> \"the beginning of the month\" would equal 12:00AM of the first day of the month<br/>\n     *    <code>$$TODAYe+1w</code> \"the end of next week\" would equal 12:00AM Sunday following the Saturday of next week<br/>\n     * Value is \"$$TODAY\"<br/>\n     */\n    TODAY: \"$$TODAY\",\n    /**\n     * Wildcard value for the current time of the current Date. Wildcards are useful for Saved Searches.<br/>\n     * If this value is passed in for any search value, it is replaced with the current date and time.<br/>\n     * The following suffixes can also be used to modify this date: [b/e][+/-][# of units][\"h\" (hour)|\"d\" (day)|\"w\" (week)|\"m\" (month)|\"q\" (quarter)|\"y\" (year)]<br/>\n     *    <code>$$NOW+1d</code> would equal the same time on the next day<br/>\n     *    <code>$$NOW-1d</code> would equal the same time on the previous day<br/>\n     *    <code>$$NOW+2w</code> would equal the same time on 2 weeks from now<br/>\n     *    <code>$$NOW+2m</code> would equal the same time on 2 months from now<br/>\n     * Value is \"$$NOW\"\n     */\n    NOW: \"$$NOW\",\n    /**\n     * Wildcard value for the currently authenticated User. Wildcards are useful for Saved Searches.<br/>\n     * If this value is passed in for any search value, it is replaced with an attribute from the current User.<br/>\n     * The following suffixes can be used: <code>.[ID(default)|homeGroupID|accessLevelID|categoryID|companyID|roleID|roleIDs|otherGroupIDs|accessLevelRank]</code><br/>\n     *    <code>$$USER</code> would equal the current User's ID<br/>\n     *    <code>$$USER.homeGroupID</code> would equal the current User's Home Group ID<br/>\n     *    <code>$$USER.accessLevelID</code> would equal the current User's Access Level ID<br/>\n     *    <code>$$USER.otherGroupIDs</code> would equal the all of the current User's Other Group IDs. This would translate into an \"IN\" clause for that queried field.<br/>\n     *    <code>$$USER.roleIDs</code> would equal the all of the current User's Roles. This would translate into an \"IN\" clause for that queried field.<br/>\n     *    <code>$$USER.roleID</code> would equal the all of the current User's Primary Role ID.<br/>\n     * Value is \"$$USER\"\n     */\n    USER: \"$$USER\",\n    /**\n     * Wildcard value for the account Customer. Wildcards are useful for Saved Searches.<br/>\n     * If this value is passed in for any search value, it is replaced with an attribute from the Customer.<br/>\n     */\n    CUSTOMER: \"$$CUSTOMER\",\n    /**\n     * Wildcard value for the account representative User. Wildcards are useful for Saved Searches.<br/>\n     * If this value is passed in for any search value, it is replaced with an attribute from the Account representative.<br/>\n     */\n    ACCOUNTREP: \"$$AR\"\n};\n/**\n * How to sort the result\n * @readonly\n * @enum {String}\n */\nexport var SortOrder = {\n    /**\n     * Ascending Sort. Value is \"asc\".\n     */\n    ASC: \"asc\",\n    /**\n     * Descending Sort. Value is \"desc\".\n     */\n    DESC: \"desc\",\n    /**\n     * Case-Insensitive Ascending Sort. Value is \"ciasc\".\n     */\n    CIASC: \"ciasc\",\n    /**\n     * Case-Insensitive Descending Sort. Value is \"cidesc\".\n     */\n    CIDESC: \"cidesc\"\n};\n/**\n * Modifiers which can be used with filters (Mod suffix)\n * @readonly\n * @enum {String}\n */\nexport var Operators = {\n    /**\n     * Produces the SQL expression <code>field < value</code>. Value is \"lt\".\n     */\n    LESSTHAN: \"lt\",\n    /**\n     * Produces the SQL expression <code>field <= value</code>. Value is \"lte\".\n     **/\n    LESSTHANEQUAL: \"lte\",\n    /**\n     * Produces the SQL expression <code>field > value</code>. Value is \"gt\".\n     **/\n    GREATERTHAN: \"gt\",\n    /**\n     * Produces the SQL expression <code>field >= value</code>. Value is \"gte\".\n     **/\n    GREATERTHANEQUAL: \"gte\",\n    /**\n     * Produces the SQL expression <code>field = value</code><br/>\n     * Note that this is the default Modifier used when 1 value exists. Value is \"eq\".\n     **/\n    EQUAL: \"eq\",\n    /**\n     * Produces the SQL expression <code>UPPER(field) = UPPER(value)</code>. Value is \"cieq\".\n     **/\n    CIEQUAL: \"cieq\",\n    /**\n     * Produces the SQL expression <code>field <> value or field is null</code>. Value is \"ne\".\n     **/\n    NOTEQUAL: \"ne\",\n    /**\n     * Produces the SQL expression <code>field <> value</code>. This differs from NOTEQUAL in that null results are not\n     * returned. Value is \"nee\".\n     **/\n    NOTEQUALEXACT: \"nee\",\n    /**\n     * Produces the SQL expression <code>UPPER(field) <> UPPER(value)</code>. Value is \"cine\".\n     **/\n    CINOTEQUAL: \"cine\",\n    /**\n     * Produces the SQL expression <code>field LIKE '%value%'</code>. Value is \"contains\".\n     **/\n    CONTAINS: \"contains\",\n    /**\n     * Produces the SQL expression <code>UPPER(field) LIKE UPPER('%value%')</code>. Value is \"cicontains\".\n     **/\n    CICONTAINS: \"cicontains\",\n    /**\n     * Produces the SQL expression <code>UPPER(field) LIKE UPPER('%value1%') OR UPPER(field) LIKE UPPER('%value2%') ... </code> where value1, value2, etc. are the results of value.split(\" \"). Value is \"cicontainsany\".\n     **/\n    CICONTAINSANY: \"cicontainsany\",\n    /**\n     * Produces the SQL expression <code>UPPER(field) LIKE UPPER('%value1%') AND UPPER(field) LIKE UPPER('%value2%') ... </code> where value1, value2, etc. are the results of value.split(\" \"). Value is \"cicontainsany\".\n     **/\n    CICONTAINSALL: \"cicontainsall\",\n    /**\n     * Produces the SQL expression <code>UPPER(field) LIKE UPPER('%value1%') AND UPPER(field) LIKE UPPER('%value2%') ... </code> where value1, value2, etc. are the results of value.split(\" \"). Value is \"cicontainsany\".\n     **/\n    CINOTCONTAINSALL: \"cinotcontainsall\",\n    /**\n     * Produces the SQL expression <code>UPPER(field) LIKE UPPER('%value1%') AND UPPER(field) LIKE UPPER('%value2%') ... </code> where value1, value2, etc. are the results of value.split(\" \"). Value is \"cicontainsany\".\n     **/\n    CINOTCONTAINSANY: \"cinotcontainsany\",\n    /**\n     * Produces the SQL expression <code>field NOT LIKE '%value%'</code>. Value is \"notcontains\".\n     **/\n    NOTCONTAINS: \"notcontains\",\n    /**\n     * Produces the SQL expression <code>UPPER(field) NOT LIKE UPPER('%value%')</code>. Value is \"cinotcontains\".\n     **/\n    CINOTCONTAINS: \"cinotcontains\",\n    /**\n     * Produces the SQL expression <code>field LIKE 'value'</code>\n     * where value can contain replacement characters such as % and _. Value is \"like\".\n     **/\n    LIKE: \"like\",\n    /**\n     * Produces the SQL expression <code>UPPER(field) LIKE UPPER('value')</code>\n     * where value can contain replacement characters such as % and _. Value is \"cilike\".\n     **/\n    CILIKE: \"cilike\",\n    /**\n     * Produces the SQL expression <code>UPPER(field) LIKE UPPER('value%')</code>. Value is \"startswith\".\n     **/\n    STARTSWITH: \"startswith\",\n    /**\n     * Produces the SQL expression <code>SOUNDEX(field) = SOUNDEX(value)</code>. Value is \"soundex\".\n     **/\n    SOUNDEX: \"soundex\",\n    /**\n     * Use of this Modifier requires the inclusion of a <code>value_Range</code> parameter.<br/>\n     * Produces the SQL expression <code>field BETWEEN value AND value_Range</code>.<br/>\n     * Note that this is the default Modifier used when a <code>_Range</code> value exists. Value is \"between\".\n     **/\n    BETWEEN: \"between\",\n    /**\n     * Use of this Modifier required the inclusion of a <code>value_Range</code> parameter.<br/>\n     * Produces the SQL expression <code>UPPER(field) BETWEEN UPPER(value) AND UPPER(value_Range)</code>. Value is \"cibetween\".\n     **/\n    CIBETWEEN: \"cibetween\",\n    /**\n     * Use of this Modifier required the inclusion of a <code>value_Range</code> parameter.<br/>\n     * Produces the SQL expression <code>fieldNOT BETWEEN value AND value_Range</code>. Value is \"notbetween\".\n     **/\n    NOTBETWEEN: \"notbetween\",\n    /**\n     * Use of this Modifier required the inclusion of a <code>value_Range</code> parameter.<br/>\n     * Produces the SQL expression <code>UPPER(field)NOT BETWEEN UPPER(value) AND UPPER(value_Range)</code>. Value is \"cinotbetween\".\n     **/\n    CINOTBETWEEN: \"cinotbetween\",\n    /**\n     * Use of this Modifier assumes multiple <code>value</code> fields with different values.<br/>\n     * Produces the SQL expression <code>field IN ( value1, value2, ..., valuen)</code><br/>\n     * Note that this is the default Modifier used when multiple <code>value</code> fields exist. Value is \"in\".\n     **/\n    IN: \"in\",\n    /**\n     * Use of this Modifier assumes multiple <code>value</code> fields with different values.<br/>\n     * Produces the SQL expression <code>UPPER(field) IN ( UPPER(value1), UPPER(value2), ..., UPPER(valuen))</code>\n     **/\n    CIIN: \"ciin\",\n    /**\n     * Use of this Modifier assumes multiple <code>value</code> fields with different values.<br/>\n     * Produces the SQL expression <code>field NOT IN ( value1, value2, ..., valuen)</code>. Value is \"notin\".\n     **/\n    NOTIN: \"notin\",\n    /**\n     * Use of this Modifier assumes multiple <code>value</code> fields with different values.<br/>\n     * Produces the SQL expression <code>UPPER(field) NOT IN ( UPPER(value1), UPPER(value2), ..., UPPER(valuen))</code>\n     **/\n    CINOTIN: \"cinotin\",\n    /**\n     * Produces the SQL expression <code>field & value > 0</code>. Value is \"bitwiseor\".<br/>\n     * Useful for checking if any of a group of bits is set.\n     **/\n    BITWISE_OR: \"bitwiseor\",\n    /**\n     * Produces the SQL expression <code>field & value = value</code>. Value is \"bitwiseand\".<br/>\n     * Useful for checking if all of a group of bits is set.\n     **/\n    BITWISE_AND: \"bitwiseand\",\n    /**\n     * Produces the SQL expression <code>field & value = 0</code>. Value is \"bitwisenand\".<br/>\n     * Useful for checking if none of a group of bits is set.\n     **/\n    BITWISE_NAND: \"bitwisenand\",\n    /**\n     * By default, searches for a date value generate the following SQL filter <code>field between <00:00:00:000 of day> and <23:59:59:999 of day></code>.<br/>\n     * This is for convenience so that date searches return any match on items that fall on that date.<br/>\n     * However, if it is desired to find an exact match on a specific time of day as well as the date, this Modifier enforces that rule.<br/>\n     * The SQL filter generated by this Modifier is <code>field = value</code>. Value is \"exacttime\".\n     */\n    EXACT_TIME: \"exacttime\",\n    /**\n     * Searches based on the string length of the given field.\n     */\n    LENGTH_LT: \"length_lt\",\n    LENGTH_EQ: \"length_eq\",\n    LENGTH_GT: \"length_gt\",\n    /**\n     * Used for DE queries that allow multiple values.<br/>\n     * This Modifier requires that DE fields have all of the specified values. Value is \"allof\".\n     */\n    ALLOF: \"allof\",\n    /**\n     * Produces the SQL expression <code>field IS NULL</code>.<br/>\n     * The <code>value</code> and <code>value_Mod</code> are both required, but the <code>value</code> is ignored. Value is \"isnull\".\n     */\n    ISNULL: \"isnull\",\n    /**\n     * Produces the SQL expression <code>field IS NOT NULL</code>.<br/>\n     * The <code>value</code> and <code>value_Mod</code> are both required, but the <code>value</code> is ignored. Value is \"notnull\".\n     */\n    NOTNULL: \"notnull\",\n    /**\n     * Produces the SQL expression <code>field IS NULL OR field = ''</code>.<br/>\n     * The <code>value</code> and <code>value_Mod</code> are both required, but the <code>value</code> is ignored. Value is \"isblank\".\n     */\n    ISBLANK: \"isblank\",\n    /**\n     * Produces the SQL expression <code>field IS NOT NULL AND field <> ''</code>.<br/>\n     * The <code>value</code> and <code>value_Mod</code> are both required, but the <code>value</code> is ignored. Value is \"notblank\".\n     */\n    NOTBLANK: \"notblank\"\n};\n/**\n * Aggregate functions which can be used with the AGGFUNC suffix.\n * @readonly\n * @enum {String}\n */\nexport var Functions = {\n    /**\n     * Maximum value aggregate function.<br/>\n     * Can only be used with the AGGFUNC suffix. Value is \"max\".\n     */\n    MAX: \"max\",\n    /**\n     * Minimum value aggregate function.<br/>\n     * Can only be used with the AGGFUNC suffix. Value is \"min\".\n     **/\n    MIN: \"min\",\n    /**\n     * Average value aggregate function.<br/>\n     * Can only be used with the AGGFUNC suffix. Value is \"avg\".\n     **/\n    AVG: \"avg\",\n    /**\n     * Summation aggregate function.\n     * Can only be used with the AGGFUNC suffix. Value is \"sum\".\n     **/\n    SUM: \"sum\",\n    /**\n     * Count aggregate function.<br/>\n     * Can only be used with the AGGFUNC suffix. Value is \"count\".\n     **/\n    COUNT: \"count\",\n    /**\n     * Standard Deviation aggregate function.<br/>\n     * Can only be used with the AGGFUNC suffix. Value is \"std\".\n     **/\n    STD: \"std\",\n    /**\n     * Variance aggregate function.<br/>\n     * Can only be used with the AGGFUNC suffix. Value is \"var\".\n     **/\n    VAR: \"var\",\n    /**\n     * Maximum value aggregate function (distinct mode).<br/>\n     * Can only be used with the AGGFUNC suffix. Value is \"dmax\".\n     **/\n    DMAX: \"dmax\",\n    /**\n     * Minimum value aggregate function (distinct mode).<br/>\n     * Can only be used with the AGGFUNC suffix. Value is \"dmin\".\n     **/\n    DMIN: \"dmin\",\n    /**\n     * Average value aggregate function (distinct mode).<br/>\n     * Can only be used with the AGGFUNC suffix. Value is \"davg\".\n     **/\n    DAVG: \"davg\",\n    /**\n     * Summation aggregate function (distinct mode).<br/>\n     * Can only be used with the AGGFUNC suffix. Value is \"dsum\".\n     **/\n    DSUM: \"dsum\",\n    /**\n     * Count aggregate function (distinct mode).<br/>\n     * Can only be used with the AGGFUNC suffix. Value is \"dcount\".\n     **/\n    DCOUNT: \"dcount\",\n    /**\n     * Standard Deviation aggregate function (distinct mode).<br/>\n     * Can only be used with the AGGFUNC suffix. Value is \"dstd\".\n     **/\n    DSTD: \"dstd\",\n    /**\n     * Variance aggregate function (distinct mode).<br/>\n     * Can only be used with the AGGFUNC suffix. Value is \"dvar\".\n     **/\n    DVAR: \"dvar\"\n};\n"],"names":["__assign","Object","assign","t","s","i","n","arguments","length","p","prototype","hasOwnProperty","call","apply","this","Api","config","path","serverAcceptsJSON","_uriGenerationMode","_httpOptions","url","alwaysUseGet","headers","apiKey","version","_a","indexOf","getApiKey","username","password","subdomain","_this","loginParams","undefined","Promise","resolve","reject","execute","then","getApiKeyData","result","generateApiKeyData","copy","objCode","objID","updates","fields","options","params","copySourceID","JSON","stringify","request","Methods","POST","count","query","req","GET","data","clearApiKey","create","edit","PUT","editMultiple","action","actionArgs","endPoint","method","get","objIDs","id","login","setSessionID","sessionID","logout","success","metadata","namedQuery","queryArgs","remove","bForce","force","DELETE","report","useHttpPost","reportQuery","clonedParams","getOptions","stringifiedFields","getFields","getHeaders","bodyParams","populateQueryStringAndBodyParams","queryString","contentType","append","appendGetMethod","makeFetchCall","body","search","searchQuery","batch","uriCollector","isAtomic","isConcurrent","uris","batchApiFactory","atomic","uri","concurrent","Error","results","map","resultItem","setApiKey","setXSRFToken","xsrfToken","uploadFileContent","fileContent","filename","FormData","Headers","Array","isArray","join","queryStringify","qs","keys","reduce","a","k","forEach","param","push","encodeURIComponent","api","apiClone","fetchOptions","fetch","credentials","ResponseHandler","failure","response","ok","json","error","status","message","statusText","err"],"mappings":"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","x_google_ignoreList":[0,2]}